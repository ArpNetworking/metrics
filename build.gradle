apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

repositories {
    maven {
	url "http://artifactory.arpnetworking.com:8081/nexus/content/groups/public/"
    }
    maven {
        url "http://repository.apache.org/snapshots/"
    }
    mavenCentral()
}
configurations {
    deployJars
}


dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3-SNAPSHOT'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.5'
    compile group: 'joda-time', name: 'joda-time', version: '2.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.8.3'
    compile group: 'com.google.guava', name: 'guava', version: '14.0.1'
    compile group: 'io.vertx', name: 'vertx-platform', version: '2.0.1-final'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.1'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '2.5.0'

    testCompile group: 'junit', name: 'junit', version: '4.8.2'
    testCompile group: 'org.jmock', name: 'jmock-junit4', version: '2.5.1'

    deployJars group: 'org.apache.maven.wagon', name: 'wagon-http', version: '1.0-beta-2'
}

findbugs {
    ignoreFailures = false
    effort = 'max'
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

findbugsTest {
    ignoreFailures = true
}

checkstyle {
    showViolations = false
    ignoreFailures = false
}
apply plugin: 'checkstyle'


checkstyleMain {
    ignoreFailures = false
    reports {
        include('**/*.java')
        xml {
            destination "${rootProject.buildDir}/reports/checkstyle/main.xml"
        }
    }
    configFile = file('./config/checkstyle/checkstyle.xml')
}

checkstyleTest {
    ignoreFailures = true
    reports {
        include('**/*.java')
        xml {
            destination "${rootProject.buildDir}/reports/checkstyle/test.xml"
        }
    }
    configFile = file('./config/checkstyle/checkstyle.xml')
}


task checkstyleReport << {
    if (file("$buildDir/reports/checkstyle/${ext.checkType}.xml").exists()) {
        ant.xslt(in: "$buildDir/reports/checkstyle/${ext.checkType}.xml",
                style: "config/checkstyle/checkstyle.xsl",
                out: "$buildDir/reports/checkstyle/checkstyle_${checkType}.html"
        )
    }
}

task quality(dependsOn: ['checkstyleMain', 'checkstyleTest'])

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        if (task.name in ['checkstyleMain', 'checkstyleTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyle(.*)$/
                if (matcher.matches()) {
                    checkType = matcher.group(1).toLowerCase()
                }
            }
            checkstyleReport.execute()
        }
    }
}

task releasePrep(dependsOn: [test,check,checkstyleReport,jacocoTestReport,javadoc]) << {

}

checkstyleReport {
    group = "Reporting"
    description = "Generate checkstyle reports"
    ext {
        checkType = "NOTHING"
    }
}

releasePrep {
    group = "Release"
    description = "Runs all tests and reports in preparation for release"
}


tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Compile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

mainClassName = 'com.arpnetworking.tsdaggregator.TsdAggregator'
sourceCompatibility = 1.7
version = '0.2.1-SNAPSHOT'
group = 'com.arpnetworking'

jar {

    manifest {
        def manifestClasspath = configurations.runtime.collect { it.getName() }.join(',')
        attributes 'Implementation-Title': 'TSD Aggregator', 'Class-Path': manifestClasspath, 'Implementation-Version': version
    }
}

uploadArchives {
    repositories.mavenDeployer {
        name = 'httpDeployer' // optional
        configuration = configurations.deployJars
        repository(url: "http://artifactory.arpnetworking.com:8081/artifactory/libs-snapshot-local/") {
            authentication(userName: "pusher", password: "pushwo")
        }
    }
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}
