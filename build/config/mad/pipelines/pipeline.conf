name = "MadPipeline"
timerStatistics = [
  "min",
  "max",
  "mean",
  "sum",
  "count",
  "histogram"
]
counterStatistics = [
  "min",
  "max",
  "mean",
  "sum",
  "count",
  "histogram"
]
gaugeStatistics = [
  "min",
  "max",
  "mean",
  "sum",
  "count",
  "histogram"
]
sources = [
  {
    type = "com.arpnetworking.metrics.common.sources.ClientHttpSourceV1"
    name = "http_source_v1"
  },
  {
    type = "com.arpnetworking.metrics.common.sources.ClientHttpSourceV2"
    name = "http_source_v2"
  },
  {
    type = "com.arpnetworking.metrics.common.sources.ClientHttpSourceV3"
    name = "http_source_v3"
  },
  {
    type="com.arpnetworking.metrics.mad.sources.MappingSource"
    name="telegraftcp_mapping_source"
    findAndReplace={
      "\\."=["/"]
    }
    source={
      type="com.arpnetworking.metrics.common.sources.TcpLineSource"
      actorName="telegraf-tcp-source"
      name="telegraftcp_source"
      host="0.0.0.0"
      port="8094"
      parser={
        type="com.arpnetworking.metrics.mad.parsers.TelegrafJsonToRecordParser"
        timestampUnit="NANOSECONDS"
      }
    }
  },
  {
    type="com.arpnetworking.metrics.mad.sources.MappingSource"
    name="collectd_mapping_source"
    "findAndReplace": {
      "^cpu/([\\d]+)/(cpu|percent)/([^/]+)(/value)?": ["cpu/$3", "cpu/by_core/$1/$3"],
      "^snmp/cpu_detailed/([\\d]+)/([^/]+)(/value)?": ["snmp/cpu/$2", "snmp/cpu/by_core/$1/$2"],
      "^load/load/((1|5|15)min)": ["load/$1"],
      "^memory/memory/([^/]+)(/value)?": ["memory/$1"],
      "^vmem/vmpage_number/([^/]+)(/value)?": ["vmem/$1"],
      "^vmem/vmpage_io/([^/]+)/(.*)": ["vmem/io/$1/$2"],
      "^vmem/vmpage_faults/(.*)": ["vmem/faults/$1"],
      "^swap/swap/([^/]+)(/value)?": ["swap/$1"],
      "^swap/swap_io/([^/]+)(/value)?": ["swap/io/$1"],
      "^interface/([^/]+)/if_([^/]+)/(.*)": ["interface/$1/$3/$2"],
      "^disk/([^/]+)/disk_([^/]+)/(read|write)": ["disk/$1/$3/$2"],
      "^df/(.*)(/value)?": ["disk/$1"],
      "^ntpd/(.*)(/value)?": ["ntpd/$1"],
      "^processes/ps_state/([^/]+)(/value)?": ["processes/by_state/$1"],
      "^processes/([^/]+)/ps_(vm|rss|data|code|stacksize)(/value)?": ["processes/by_name/$1/$2"],
      "^processes/([^/]+)/ps_(cputime|count|pagefaults)/(.*)": ["processes/by_name/$1/$2/$3"],
      "^processes/([^/]+)/ps_disk_([^/]+)/(.*)": ["processes/by_name/$1/disk/$3/$2"],
      "^tcpconns/([^-]+)-(local|remote)/tcp_connections/([^/]+)(/value)?": ["tcpconns/$2/$1/$3"],
      "^tcpconns/all/tcp_connections/([^/]+)(/value)?": ["tcpconns/all/$1"],
      "^memcached/df/cache/(.*)": ["memcached/cache/$1"],
      "^memcached/memcached_command/([^/]+)(/value)?": ["memcached/commands/$1"],
      "^memcached/memcached_connections/current(/value)?": ["memcached/connections"],
      "^memcached/memcached_items/current(/value)?": ["memcached/items"],
      "^memcached/memcached_octets/rx": ["memcached/network/bytes_read"],
      "^memcached/memcached_octets/tx": ["memcached/network/bytes_written"],
      "^memcached/memcached_ops/([^/]+)(/value)?": ["memcached/operations/$1"],
      "^memcached/percent/([^/]+)(/value)?": ["memcached/$1"],
      "^memcached/ps_count/.*": [],
      "^memcached/ps_cputime/.*": [],
      "^uptime/uptime(/value)?": ["uptime/value"]
    },
    "source": {
      type="com.arpnetworking.metrics.common.sources.CollectdHttpSourceV1"
      name="collectd_http_source"
    }
  },
  {
    type="com.arpnetworking.metrics.mad.sources.MappingSource"
    name="graphitetcp_mapping_source"
    findAndReplace={
      "\\."=["/"]
    }
    source={
      type="com.arpnetworking.metrics.common.sources.TcpLineSource"
      actorName="graphite-tcp-source"
      name="graphitetcp_source"
      host="0.0.0.0"
      port="2003"
      parser={
        type="com.arpnetworking.metrics.mad.parsers.GraphitePlaintextToRecordParser"
        timestampUnit="NANOSECONDS"
      }
    }
  }
]
sinks = [
  {
    type = "com.arpnetworking.tsdcore.sinks.PeriodicStatisticsSink"
    name = "http_periodic_statistics_sink"
    intervalInMilliseconds = "1000"
  },
  {
    type = "com.arpnetworking.tsdcore.sinks.PeriodFilteringSink"
    name = "period_filtering_http_telemetry_sink"
    excludeGreaterThan = "PT1S"
    sink = {
      type = "com.arpnetworking.tsdcore.sinks.TimeThresholdSink"
      name = "time_threshold_http_telemetry_sink"
      threshold = "PT10M"
      sink = {
        type = "com.arpnetworking.tsdcore.sinks.TelemetrySink"
        name = "http_telemetry_sink"
      }
    }
  },
  {
    type = "com.arpnetworking.tsdcore.sinks.PeriodFilteringSink"
    name = "period_filtering_http_cluster_sink"
    excludeLessThan = "PT1M"
    sink = {
      type = "com.arpnetworking.tsdcore.sinks.TimeThresholdSink"
      name = "time_threshold_http_cluster_sink"
      threshold = "PT10M"
      sink = {
        type = "com.arpnetworking.tsdcore.sinks.AggregationServerHttpSink"
        #type = "com.arpnetworking.tsdcore.sinks.AggregationServerSink"
        name = "http_cluster_sink"
        uri = "http://localhost:7066/metrics/v1/data/reaggregate"
        serverAddress = "127.0.0.1"
      }
    }
  }
]