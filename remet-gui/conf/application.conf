# Copyright 2014 Brandon Arp
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ~~~~~

include "cluster.conf"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="j;CsRfxs6n[6fA>Bb2^4@YVNdNw0omx=2L;=jqvGqfCuouukvF/KSrLJI?e:6xi4"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global = global.Global
play.modules.enabled += "global.MainModule"
play.http.requestHandler = global.RequestHandler
play.http.errorHandler = "global.ErrorHandler"

# Metrics
# ~~~~~
metrics.name="remet-gui-query"
metrics.path="logs"
metrics.jvm.interval = 500 millis

# Database
# ~~~~~
# NOTE: No database configured by default. Do not use database based repositories before configuring a database.

## SAMPLE DATABASE CREATION ##
#
# First, connect to the admin database (e.g. postgres) with the root user (e.g. postgres):
#
#CREATE ROLE metrics_app LOGIN
#NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION CONNECTION LIMIT 10;
#CREATE ROLE metrics_dba LOGIN
#NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION CONNECTION LIMIT 6;
#CREATE DATABASE metrics WITH OWNER = metrics_dba
#ENCODING = 'UTF8'
#TABLESPACE = pg_default
#LC_COLLATE = 'C'
#LC_CTYPE = 'C'
#CONNECTION LIMIT = -1;
#
# Next, connect to the metrics database with metrics_dba user:
#
#CREATE SCHEMA remet AUTHORIZATION metrics_dba;
#GRANT ALL ON SCHEMA remet TO metrics_dba;
#GRANT USAGE ON SCHEMA remet TO metrics_app;

## SAMPLE DATABASE CONFIGURATION ##
#
#db.metrics_remet_dml.url="jdbc:postgresql://localhost:5432/postgres"
#db.metrics_remet_dml.driver="org.postgresql.Driver"
#db.metrics_remet_dml.username="metrics_app"
#db.metrics_remet_dml.password="metrics_app_password"
#db.metrics_remet_dml.hikaricp.poolName="metrics_remet_dml"
#db.metrics_remet_dml.hikaricp.maximumPoolSize=5
#db.metrics_remet_ddl.url="jdbc:postgresql://localhost:5432/postgres"
#db.metrics_remet_ddl.driver="org.postgresql.Driver"
#db.metrics_remet_ddl.username="metrics_dba"
#db.metrics_remet_ddl.password="metrics_dba_password"
#db.metrics_remet_ddl.initOnMigrate=false
#db.metrics_remet_ddl.validateOnMigrate=true
#db.metrics_remet_ddl.encoding="UTF-8"
#db.metrics_remet_ddl.migration.auto=true
#db.metrics_remet_ddl.migration.schemas=["remet"]
#db.metrics_remet_ddl.hikaricp.poolName="metrics_remet_ddl"
#db.metrics_remet_ddl.hikaricp.maximumPoolSize=2

# Evolutions
# ~~~~~
evolutionplugin=disabled
play.modules.enabled += "org.flywaydb.play.PlayModule"

# Elastic search
# ~~~~~
elasticSearch {
  cluster.name = "Testing"
  node.local = true
  node.data = true
  path.logs = logs
  path.data = data

  discovery.zen.ping.unicast.hosts = ""
  discovery.zen.minimum_master_nodes = 2

  # Hosts index
  # ~~~~~
  index.hosts {
    shards = 1
    replicas = 0
    refresh = "1s"
  }
}

# Host repository
# ~~~~~
hostRepository.type=com.arpnetworking.remet.gui.hosts.impl.LocalHostRepository

# Host provider
# ~~~~~
hostProvider {
  type = com.arpnetworking.remet.gui.hosts.impl.NoHostProvider
  initialDelay = 0 seconds
  interval = 5 seconds
}

# Alerts
# ~~~~~
alertRepository {
  type=com.arpnetworking.remet.gui.alerts.impl.DynamicConfigurationAlertRepository
  uri="../build/start/remetgui/alerts.json"
}

# Expressions
# ~~~~~
expressionRepository {
  type=com.arpnetworking.remet.gui.expressions.impl.DynamicConfigurationExpressionRepository
  uri="../build/start/remetgui/expressions.json"
}

# Akka
# ~~~~~
akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    debug {
      unhandled = on
    }
  }
}
